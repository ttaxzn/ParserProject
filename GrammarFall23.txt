program -> linelist $$ 
linelist -> line linelist | epsilon 
line ->  label stmt linetail 
label -> id: | epsilon 
linetail -> stmt+ | epsilon 
stmt -> id = expr; 
	| if (boolean) stmt; 
	| while (boolean) linelist endwhile;
	| read id; 
	| write expr; 
	| goto id; 
	| gosub id; 
	| return;
	| break;
	| end; 
boolean -> true | false | expr bool-op expr 
bool-op -> < | > | >= | <= | <> | =
expr -> id etail | num etail | (expr) 
etail -> + expr | - expr | * expr | / expr | epsilon
id -> [a-zA-Z][a-zA-Z0-9]*
num -> numsign digit digit*
numsign -> + | - | epsilon 

The regular-expression notation sometimes throws people off. An id is an alphabetic character followed by 0 or more alphanumeric characters. There is no maximum length for an id. 

A reserved word (if, while, goto, gosub, etc) may not be used as a statement label. 
gotohere: if (x > 5) y = y+1
is valid; 
goto: if (x > 5) y = y+1
is a syntax error. 

Note that statements always end with a semicolon. (It's not strictly needed in some cases, such as return and endwhile, but is present to maintain the convention, to simplify parsing.) 
